#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t sem; // declare a global semaphore variable
int counter = 0;

void* threadFunc(void *arg) {
    int id = ((int)arg);
    sem_wait(&sem); // acquire the semaphore
    counter += 1;
    printf("Semaphore acquired on data item\n");
    printf("Thread %d started\n", id);
    sleep(1);
    printf("Thread %d finished\n", id);
    sem_post(&sem); // release the semaphore
    printf("Semaphore released on data item\n");

    return NULL;
}

int main() {
    int num_threads, start_id;
    printf("Enter the number of threads: ");
    scanf("%d", &num_threads);
    printf("Enter the starting ID: ");
    scanf("%d", &start_id);

    pthread_t threads[num_threads];
    int thread_ids[num_threads];

    if (sem_init(&sem, 0, 1) != 0) { // initialize the semaphore with value 1
        printf("Semaphore init failed\n");
        return 1;
    }

    for (int i = 0; i < num_threads; i++) {
        thread_ids[i] = start_id + i;
        pthread_create(&threads[i], NULL, threadFunc, &thread_ids[i]);
    }

    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }

   sem_destroy(&sem); // destroy the semaphore

   return 0;
}
